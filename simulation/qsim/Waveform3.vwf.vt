// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/04/2021 01:40:50"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          debounce
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module debounce_vlg_vec_tst();
// constants                                           
// general purpose registers
reg btn;
reg clk;
// wires                                               
wire tecla;

// assign statements (if any)                          
debounce i1 (
// port map - connection between master ports and signals/registers   
	.btn(btn),
	.clk(clk),
	.tecla(tecla)
);
initial 
begin 
#1000000 $stop;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

// btn
always
begin
	btn = 1'b0;
	btn = #1000 1'b1;
	#4000;
end 
endmodule

