// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "07/24/2021 14:11:02"

// 
// Device: Altera EP4CE6E22C8 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module contador_mod_25 (
	clock,
	enable,
	q,
	tc);
input 	clock;
input 	enable;
output 	[4:0] q;
output 	tc;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \q[0]~output_o ;
wire \q[1]~output_o ;
wire \q[2]~output_o ;
wire \q[3]~output_o ;
wire \q[4]~output_o ;
wire \tc~output_o ;
wire \clock~input_o ;
wire \op_2~0_combout ;
wire \op_2~5 ;
wire \op_2~6_combout ;
wire \enable~input_o ;
wire \count[4]~4_combout ;
wire \count[1]~1_combout ;
wire \op_2~1 ;
wire \op_2~2_combout ;
wire \count[2]~2_combout ;
wire \op_2~3 ;
wire \op_2~4_combout ;
wire \count[3]~3_combout ;
wire \count[0]~0_combout ;
wire \tc~0_combout ;
wire \tc~1_combout ;
wire [4:0] count;


cycloneive_io_obuf \q[0]~output (
	.i(count[0]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[0]~output .bus_hold = "false";
defparam \q[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \q[1]~output (
	.i(count[1]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[1]~output .bus_hold = "false";
defparam \q[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \q[2]~output (
	.i(count[2]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[2]~output .bus_hold = "false";
defparam \q[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \q[3]~output (
	.i(count[3]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[3]~output .bus_hold = "false";
defparam \q[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \q[4]~output (
	.i(count[4]),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \q[4]~output .bus_hold = "false";
defparam \q[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \tc~output (
	.i(\tc~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\tc~output_o ),
	.obar());
// synopsys translate_off
defparam \tc~output .bus_hold = "false";
defparam \tc~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \op_2~0 (
// Equation(s):
// \op_2~0_combout  = (count[0] & (count[1] $ (VCC))) # (!count[0] & (count[1] & VCC))
// \op_2~1  = CARRY((count[0] & count[1]))

	.dataa(count[0]),
	.datab(count[1]),
	.datac(gnd),
	.datad(vcc),
	.cin(gnd),
	.combout(\op_2~0_combout ),
	.cout(\op_2~1 ));
// synopsys translate_off
defparam \op_2~0 .lut_mask = 16'h6688;
defparam \op_2~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \op_2~4 (
// Equation(s):
// \op_2~4_combout  = (count[3] & (\op_2~3  $ (GND))) # (!count[3] & (!\op_2~3  & VCC))
// \op_2~5  = CARRY((count[3] & !\op_2~3 ))

	.dataa(count[3]),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\op_2~3 ),
	.combout(\op_2~4_combout ),
	.cout(\op_2~5 ));
// synopsys translate_off
defparam \op_2~4 .lut_mask = 16'hA50A;
defparam \op_2~4 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_lcell_comb \op_2~6 (
// Equation(s):
// \op_2~6_combout  = count[4] $ (\op_2~5 )

	.dataa(count[4]),
	.datab(gnd),
	.datac(gnd),
	.datad(gnd),
	.cin(\op_2~5 ),
	.combout(\op_2~6_combout ),
	.cout());
// synopsys translate_off
defparam \op_2~6 .lut_mask = 16'h5A5A;
defparam \op_2~6 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_io_ibuf \enable~input (
	.i(enable),
	.ibar(gnd),
	.o(\enable~input_o ));
// synopsys translate_off
defparam \enable~input .bus_hold = "false";
defparam \enable~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \count[4]~4 (
// Equation(s):
// \count[4]~4_combout  = (\enable~input_o  & (\op_2~6_combout  & ((!count[3]) # (!count[4])))) # (!\enable~input_o  & (((count[4]))))

	.dataa(\op_2~6_combout ),
	.datab(count[4]),
	.datac(count[3]),
	.datad(\enable~input_o ),
	.cin(gnd),
	.combout(\count[4]~4_combout ),
	.cout());
// synopsys translate_off
defparam \count[4]~4 .lut_mask = 16'h2ACC;
defparam \count[4]~4 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \count[4] (
	.clk(\clock~input_o ),
	.d(\count[4]~4_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(count[4]),
	.prn(vcc));
// synopsys translate_off
defparam \count[4] .is_wysiwyg = "true";
defparam \count[4] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \count[1]~1 (
// Equation(s):
// \count[1]~1_combout  = (\op_2~0_combout  & ((!count[4]) # (!count[3])))

	.dataa(\op_2~0_combout ),
	.datab(gnd),
	.datac(count[3]),
	.datad(count[4]),
	.cin(gnd),
	.combout(\count[1]~1_combout ),
	.cout());
// synopsys translate_off
defparam \count[1]~1 .lut_mask = 16'h0AAA;
defparam \count[1]~1 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \count[1] (
	.clk(\clock~input_o ),
	.d(\count[1]~1_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\enable~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(count[1]),
	.prn(vcc));
// synopsys translate_off
defparam \count[1] .is_wysiwyg = "true";
defparam \count[1] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \op_2~2 (
// Equation(s):
// \op_2~2_combout  = (count[2] & (!\op_2~1 )) # (!count[2] & ((\op_2~1 ) # (GND)))
// \op_2~3  = CARRY((!\op_2~1 ) # (!count[2]))

	.dataa(count[2]),
	.datab(gnd),
	.datac(gnd),
	.datad(vcc),
	.cin(\op_2~1 ),
	.combout(\op_2~2_combout ),
	.cout(\op_2~3 ));
// synopsys translate_off
defparam \op_2~2 .lut_mask = 16'h5A5F;
defparam \op_2~2 .sum_lutc_input = "cin";
// synopsys translate_on

cycloneive_lcell_comb \count[2]~2 (
// Equation(s):
// \count[2]~2_combout  = (\op_2~2_combout  & ((!count[4]) # (!count[3])))

	.dataa(\op_2~2_combout ),
	.datab(gnd),
	.datac(count[3]),
	.datad(count[4]),
	.cin(gnd),
	.combout(\count[2]~2_combout ),
	.cout());
// synopsys translate_off
defparam \count[2]~2 .lut_mask = 16'h0AAA;
defparam \count[2]~2 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \count[2] (
	.clk(\clock~input_o ),
	.d(\count[2]~2_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(\enable~input_o ),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(count[2]),
	.prn(vcc));
// synopsys translate_off
defparam \count[2] .is_wysiwyg = "true";
defparam \count[2] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \count[3]~3 (
// Equation(s):
// \count[3]~3_combout  = (\enable~input_o  & (\op_2~4_combout  & ((!count[4]) # (!count[3])))) # (!\enable~input_o  & (((count[3]))))

	.dataa(\op_2~4_combout ),
	.datab(count[3]),
	.datac(count[4]),
	.datad(\enable~input_o ),
	.cin(gnd),
	.combout(\count[3]~3_combout ),
	.cout());
// synopsys translate_off
defparam \count[3]~3 .lut_mask = 16'h2ACC;
defparam \count[3]~3 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \count[3] (
	.clk(\clock~input_o ),
	.d(\count[3]~3_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(count[3]),
	.prn(vcc));
// synopsys translate_off
defparam \count[3] .is_wysiwyg = "true";
defparam \count[3] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \count[0]~0 (
// Equation(s):
// \count[0]~0_combout  = (count[0] & (((!\enable~input_o )))) # (!count[0] & (\enable~input_o  & ((!count[4]) # (!count[3]))))

	.dataa(count[3]),
	.datab(count[4]),
	.datac(count[0]),
	.datad(\enable~input_o ),
	.cin(gnd),
	.combout(\count[0]~0_combout ),
	.cout());
// synopsys translate_off
defparam \count[0]~0 .lut_mask = 16'h07F0;
defparam \count[0]~0 .sum_lutc_input = "datac";
// synopsys translate_on

dffeas \count[0] (
	.clk(\clock~input_o ),
	.d(\count[0]~0_combout ),
	.asdata(vcc),
	.clrn(vcc),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(count[0]),
	.prn(vcc));
// synopsys translate_off
defparam \count[0] .is_wysiwyg = "true";
defparam \count[0] .power_up = "low";
// synopsys translate_on

cycloneive_lcell_comb \tc~0 (
// Equation(s):
// \tc~0_combout  = (count[3] & (count[4] & (\enable~input_o  & !count[2])))

	.dataa(count[3]),
	.datab(count[4]),
	.datac(\enable~input_o ),
	.datad(count[2]),
	.cin(gnd),
	.combout(\tc~0_combout ),
	.cout());
// synopsys translate_off
defparam \tc~0 .lut_mask = 16'h0080;
defparam \tc~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_lcell_comb \tc~1 (
// Equation(s):
// \tc~1_combout  = (\tc~0_combout  & (!count[0] & !count[1]))

	.dataa(\tc~0_combout ),
	.datab(gnd),
	.datac(count[0]),
	.datad(count[1]),
	.cin(gnd),
	.combout(\tc~1_combout ),
	.cout());
// synopsys translate_off
defparam \tc~1 .lut_mask = 16'h000A;
defparam \tc~1 .sum_lutc_input = "datac";
// synopsys translate_on

assign q[0] = \q[0]~output_o ;

assign q[1] = \q[1]~output_o ;

assign q[2] = \q[2]~output_o ;

assign q[3] = \q[3]~output_o ;

assign q[4] = \q[4]~output_o ;

assign tc = \tc~output_o ;

endmodule
